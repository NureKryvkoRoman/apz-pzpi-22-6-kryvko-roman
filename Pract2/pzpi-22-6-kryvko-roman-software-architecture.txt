Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії
ЗВІТ
до практичного заняття з дисципліни
"Архітектура програмного забезпечення"
(завдання №2)






Виконав: ст. гр. ПЗПІ-22-6
Кривко Роман Андрійович


Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович




Харків 2025
1 ІСТОРІЯ ЗМІН
Таблиця 1.1 Історія змін
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	26.04.2025
	0.1
	Створено історію змін.
	2
	27.04.2025
	0.2
	Створено розділ “Завдання”.
	3
	27.04.2025
	0.3
	Внесено інформацію про виконану роботу.


2 ЗАВДАННЯ
Метою практичної роботи є дослідити архітектуру однієї з відомих складних програмних систем.
3 ОПИС ВИКОНАНОЇ РОБОТИ
        Під час виконання роботи була проаналізована архітектура складної програмної системи GitLab. Саме вона була обрана мною для дослідження через низку факторів, серед яких масштабність платформи (система GitLab “програмне забезпечення як сервіс” обробляє численні запити користувачів щодня) та відкритість системи (простіше дослідити систему та знайти дані про її внутрішню будову).
GitLab — це веб-платформа та система керування репозиторіями, побудована на основі системи контролю версій Git. GitLab Community Edition є повністю відкритим програмним забезпеченням, що розповсюджується під ліцензією MIT. Це гарантує прозорість розробки та дозволяє вивчити внутрішню будову системи без обмежень. Багато проєктів, що займаються розробкою вільного програмного забезпечення, включаючи сам GitLab, обирають саме цю платформу для зберігання свого програмного коду та робочої комунікації.
GitLab пропонує своїм користувачам різні варіанти використання. Наприклад, основний сайт компанії є платформою “ПЗ як сервіс”, але для бажаючих також доступні більш гнучкі опції для самостійного розгортання: відкрита Community Edition та закрита Enterprise Edition.
Основа GitLab — веб-застосунок, написаний мовою Ruby з використанням фреймворку Ruby on Rails. Архітектурно GitLab представляє собою модульний моноліт — тобто єдиний застосунок, що складається з багатьох взаємопов'язаних модулів, хоча платформа покладається на багато інших сервісів, комунікація з якими відбувається переважно через Unix-сокети. Такий вибір обумовлений доволі низькою продуктивністю мови Ruby: всі процеси, для яких швидкість критична (наприклад, база даних або робота з git-репозиторіями), перекладаються на сервіси, написані більш продуктивними мовами, як от Go або C.
GitLab реалізує архітектуру модульного моноліту, що поєднує переваги цілісної системи з гнучкістю модульного підходу. Основними перевагами такого рішення є:
* Єдність коду: Усі модулі працюють у межах одного застосунку, що спрощує керування версіями, тестування та розгортання.
* Спрощена взаємодія: Модулі взаємодіють напряму через внутрішні виклики, без необхідності складних API-з'єднань або мережевих запитів, що підвищує продуктивність і зменшує затримки.
* Простота розгортання: Систему можна розгортати одним пакетом, без необхідності налаштовувати велику кількість окремих сервісів.
* Легкість внесення змін: Завдяки спільному коду змінювати функціональність та вдосконалювати систему можна швидко і без зайвої інтеграційної складності.
4 ВИСНОВКИ
        Отже, під час виконання практичного завдання нами було розглянуто архітектуру складної програмної системи GitLab. Посилання на відеозапис презентації наведено у додатку А, слайди презентації у додатку Б.
________________
ДОДАТОК А
Відеозапис доповіді на YouTube: 
Хронологічний опис доповіді:
00:00 - Вступ
________________
________________


ДОДАТОК Б


Рис. Б.1 - Титульний слайд
